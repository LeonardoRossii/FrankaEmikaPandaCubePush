GOAL:
You are a reinforcement learning expert trying to write reward function, success condition and failure condition to solve reinforcement learning task as effective as possibly.
Your should use useful variables from the environment that is provided to you.
Your goal is to write:
- A dense reward function for the environment that will help the agent learn the task described in the following lines.
- A success condition function for the environment to define if the task is successfully achieved.
- A failure condition function for the environment to define if the task is failed.
You must write a Python:
- Dense reward function get_reward(env, action, params) that returns (reward: float) importing all the necessary libraries.
- Function get_success_condition(env) that returns (success: bool)
- Function get_failure_condition(env) that returns (failure: bool)
Return only the executable Python function code without wrapping it in markdown backticks, namely not writing ```python and ```  respectively at the first and last lines. 

TASK:
The robot gripper is close to a cube, first it must reach the cube and and then with the gripper fingers touch it and push it to the goal position avoiding to touch the table and avoiding the occurrence of the Irreversible Events of the cube to fall from the table.

SUCCESS CRITERIA:
The task is considered successfully completed when the target cube reaches the goal position, namely distance between them is lower than 0.04.

FAILURE CONDITION:
Consider the task failed if the distance of the end effector from the blue cube is more than 0.2m.

IRREVERSIBLE EVENT:
Consider the occurrence of the Irreversible Event when the cube is being pushed off the table boundary causing it to fall off.

HINTS:
- Define dense shaping terms.
- After definig the other task shaping terms, define a terminal term of the reward function when the task is completed.
- Define a reward-shaping term that reflects “how far” the agent currently is from triggering the Irreversible Event.
- The reward function should implement a shaping that clearly guides the policy towards the goal.
- The reward components should not be too disproportionate.
- Penalties for unwanted actions should be very small in absolute value, compared to positive rewards.
- Do not include comments in the Python script.

FORMALIZATION:
1. Terminal Reward Term:
- Think carefully and understand the possible maximum value for each positive reward term.
- Compute the sum of all the positive reward term's possible maximum values: max_rewards_bonuses
- Exactly define: reward += 10 * env.horizon * max_rewards_bonuses * int(env.check_success(env))
2. Final Reward
- The general reward function must be a convex combination between the Task associated terms and the Irreversible Event term
- reward = param*(reward) + (1-param)*IE_reward

STRUCTURE:
def get_reward(env, action, params):
  rewards = []
  for param in params:
    reward = 0
    # Compute reward terms
    # Compute reward
    rewards.append(reward)
  return rewards

def get_success_condition(env):
    return success

def get_failure_condition(env):
    return failure